.. note::

    こんにちは、SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Communityへようこそ！Facebook上で、仲間と一緒にRaspberry Pi、Arduino、ESP32をさらに深く探求しましょう。

    **なぜ参加するのか？**

    - **専門的なサポート**：購入後の問題や技術的な課題をコミュニティやチームの助けを借りて解決。
    - **学びと共有**：スキルを向上させるためのヒントやチュートリアルを交換。
    - **限定プレビュー**：新製品発表や予告編に早期アクセス。
    - **特別割引**：最新製品の特別割引を楽しむ。
    - **フェスティブプロモーションとプレゼント**：プレゼントやホリデープロモーションに参加。

    👉 私たちと一緒に探索と創造を始める準備はできましたか？[|link_sf_facebook|]をクリックして、今すぐ参加しましょう！

.. _cpn_servo:

サーボモーター (SG90)
==========================

.. image:: img/33_servo.png
    :width: 300
    :align: center

サーボモーターは、特定の角度や位置に回転できるデバイスです。ロボットアームの移動、ステアリングホイールの操作、カメラジンバルの動作などに使用できます。サーボモーターには3本のワイヤーがあります：電源、グランド、信号。電源ワイヤーは通常赤色で、Arduinoボードの5Vピンに接続します。グランドワイヤーは通常黒色または茶色で、ボードのグランドピンに接続します。信号ワイヤーは通常黄色またはオレンジ色で、ボードのPWMピンに接続します。

ピン配置
---------------------------
* 茶色のワイヤー: GND
* オレンジ色のワイヤー: 信号ピン、メインボードのPWMピンに接続します。
* 赤色のワイヤー: VCC

原理
---------------------------
サーボは一般的に次の部品で構成されています：ケース、シャフト、ギアシステム、ポテンショメーター、DCモーター、組み込みボード。

動作の仕組みは以下の通りです：

* マイクロコントローラーがPWM信号をサーボに送信し、サーボ内の組み込みボードが信号ピンを通じて信号を受信し、内部のモーターを制御します。
* モーターがギアシステムを駆動し、減速後にシャフトを動かします。
* サーボのシャフトとポテンショメーターは連結されています。
* シャフトが回転すると、ポテンショメーターを駆動し、ポテンショメーターが電圧信号を組み込みボードに出力します。
* 組み込みボードは現在の位置に基づいて回転方向と速度を決定し、正確に定義された位置で停止し、その位置を保持します。

.. image:: img/33_servo_internal.png
    :width: 450
    :align: center

.. raw:: html
    
    <br/>

.. _cpn_servo_pulse:

**作業パルス**

角度は制御ワイヤーに適用されるパルスの持続時間によって決定されます。これはパルス幅変調と呼ばれます。

* サーボは20msごとにパルスを期待しています。パルスの長さがサーボの回転範囲を決定します。
* 例えば、1.5msのパルスはサーボを90度の位置（中立位置）に回転させます。
* 1.5ms未満のパルスがサーボに送信されると、サーボは中立点から反時計回りにある程度回転してその出力シャフトを保持します。
* パルスが1.5msより長い場合はその逆が起こります。
* サーボが有効な位置に回転するように命令するパルスの最小幅と最大幅は各サーボの機能によります。
* 一般的に、パルス幅は約0.5ms〜2.5msです。

.. image:: img/33_servo_duty.png
    :width: 90%
    :align: center

.. raw:: html
    
    <br/>

例
---------------------------
* :ref:`uno_lesson33_servo` (Arduino UNO)
* :ref:`esp32_lesson33_servo` (ESP32)
* :ref:`pico_lesson33_servo` (Raspberry Pi Pico)
* :ref:`pi_lesson33_servo` (Raspberry Pi)

* :ref:`uno_lesson37_trashcan` (Arduino UNO)
* :ref:`esp32_trashcan` (ESP32)