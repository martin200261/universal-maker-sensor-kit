.. note::

   Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

   **Warum beitreten?**

   - **ExpertenunterstÃ¼tzung**: LÃ¶sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
   - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre FÃ¤higkeiten zu verbessern.
   - **Exklusive Vorschauen**: Erhalten Sie frÃ¼hzeitigen Zugang zu neuen ProduktankÃ¼ndigungen und exklusiven Einblicken.
   - **Spezialrabatte**: GenieÃŸen Sie exklusive Rabatte auf unsere neuesten Produkte.
   - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

   ðŸ‘‰ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _pi_lesson06_hall_sensor:

Lektion 06: Hallsensormodul
==================================

.. note::
   Der Raspberry Pi verfÃ¼gt nicht Ã¼ber analoge EingabemÃ¶glichkeiten, daher benÃ¶tigt er ein Modul wie den :ref:`cpn_pcf8591`, um analoge Signale zur Verarbeitung zu lesen.

In dieser Lektion lernen wir, wie man mit einem Raspberry Pi von einem Hallsensormodul liest. Sie lernen, wie man ein Fotowiderstandsmodul an den PCF8591 fÃ¼r die Analog-Digital-Umwandlung anschlieÃŸt und dessen Ausgang in Echtzeit mit Python Ã¼berwacht. AuÃŸerdem werden Sie erkunden, wie man analoge Werte liest und interpretiert, um das Vorhandensein und die Art von Magnetpolen zu erkennen.

BenÃ¶tigte Komponenten
--------------------------

In diesem Projekt benÃ¶tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Universal Maker Sensor Kit
        - 94
        - |link_umsk|

Sie kÃ¶nnen sie auch einzeln Ã¼ber die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - Component Introduction
        - Purchase Link

    *   - Raspberry Pi 5
        - \-
    *   - :ref:`cpn_hall`
        - \-
    *   - :ref:`cpn_pcf8591`
        - |link_pcf8591_module_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|


Verkabelung
---------------------------

.. image:: img/Lesson_06_Hall_Sensor_Module_pi_bb.png
    :width: 100%


Code
---------------------------

.. code-block:: python

   import PCF8591 as ADC  # Import PCF8591 module
   import time  # Import time for delay
   
   ADC.setup(0x48)  # Initialize PCF8591 at address 0x48
   
   try:
       while True:  # Continuously read and print
           sensor_value = ADC.read(1) # Read from hall sensor module at AIN1
           print(sensor_value,end="")  # Print the sensor raw data
   
           # Determine the polarity of the magnet
           if sensor_value >= 180:
               print(" - South pole detected")   # Determined as South pole.
           elif sensor_value <= 80:
               print(" - North pole detected")   # Determined as North pole.
   
           time.sleep(0.2)  # Wait for 0.2 seconds before the next read
   
   except KeyboardInterrupt:
       print("Exit")  # Exit on CTRL+C

Code-Analyse
---------------------------

#. **Bibliotheken importieren**:

   .. code-block:: python
      
      import PCF8591 as ADC  # Import PCF8591 module
      import time  # Import time for delay

   Diese Importe sind notwendig. ``PCF8591`` wird zur Interaktion mit dem ADC-Modul verwendet, und ``time`` dient zur Implementierung von VerzÃ¶gerungen in der Schleife.

#. **ADC-Modul initialisieren**:

   .. code-block:: python
      
      ADC.setup(0x48)  # Initialize PCF8591 at address 0x48

   Das PCF8591-Modul wird eingerichtet. ``0x48`` ist die I2C-Adresse des PCF8591-Moduls. Diese Zeile bereitet den Raspberry Pi auf die Kommunikation mit dem Modul vor.

#. **Hauptschleife zur Sensorabfrage**:

   .. code-block:: python

      try:
          while True:  # Continuously read and print
              sensor_value = ADC.read(1) # Read from hall sensor module at AIN1
              print(sensor_value, end="")  # Print the sensor raw data

   In dieser Schleife wird ``sensor_value`` kontinuierlich vom Hallsensor (angeschlossen an AIN1 des PCF8591) gelesen. Die ``print``-Anweisung gibt die Rohdaten des Sensors aus.

#. **MagnetpolaritÃ¤t bestimmen**:

   .. code-block:: python
      
              # Determine the polarity of the magnet
              if sensor_value >= 180:
                  print(" - South pole detected")   # Determined as South pole.
              elif sensor_value <= 80:
                  print(" - North pole detected")   # Determined as North pole.

   Hier bestimmt der Code die PolaritÃ¤t des Magneten. Wenn ``sensor_value`` 180 oder hÃ¶her ist, wird er als SÃ¼dpol identifiziert. Wenn er 80 oder niedriger ist, wird er als Nordpol betrachtet. Diese Schwellenwerte sollten basierend auf Ihren tatsÃ¤chlichen Messergebnissen angepasst werden.

   Das Hallsensormodul ist mit einem 49E linearen Halleffekt-Sensor ausgestattet, der die PolaritÃ¤t der Magnetfeld-Nord- und SÃ¼dpole sowie die relative StÃ¤rke des Magnetfelds messen kann. Wenn Sie den SÃ¼dpol eines Magneten in die NÃ¤he der mit 49E gekennzeichneten Seite (die Seite mit der Gravur) bringen, erhÃ¶ht sich der vom Code gelesene Wert linear proportional zur angelegten MagnetfeldstÃ¤rke. Umgekehrt sinkt der gelesene Wert linear proportional zur MagnetfeldstÃ¤rke, wenn Sie einen Nordpol in die NÃ¤he dieser Seite bringen. Weitere Details finden Sie unter :ref:`cpn_hall`.

#. **VerzÃ¶gerung und Ausnahmebehandlung**:

   .. code-block:: python

      time.sleep(0.2)  # Wait for 0.2 seconds before the next read

      except KeyboardInterrupt:
          print("Exit")  # Exit on CTRL+C

   ``time.sleep(0.2)`` erzeugt eine VerzÃ¶gerung von 0,2 Sekunden zwischen jeder Schleifeniteration, um eine Ã¼bermÃ¤ÃŸige Abtastrate zu verhindern. Der ``except``-Block fÃ¤ngt eine Tastaturunterbrechung (STRG+C) ab, um das Programm sauber zu beenden.
