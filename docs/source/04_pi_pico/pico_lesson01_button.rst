.. note::

   Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

   **Warum beitreten?**

   - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
   - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
   - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
   - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
   - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

   üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _pico_lesson01_button:

Lektion 01: Tastermodul
====================================

In dieser Lektion lernen Sie, wie Sie den Raspberry Pi Pico W verwenden, um mit der integrierten LED mithilfe eines Tasters zu interagieren. Durch Dr√ºcken des Tasters wird die LED eingeschaltet, und durch Loslassen des Tasters wird sie ausgeschaltet. Dieses Projekt eignet sich besonders f√ºr Anf√§nger, da es praktische Erfahrungen mit Ein- und Ausgabevorg√§ngen am Raspberry Pi Pico W unter Verwendung von MicroPython bietet.

Erforderliche Komponenten
-----------------------------

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

Es ist definitiv praktisch, ein ganzes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Universal Maker Sensor Kit
        - 94
        - |link_umsk|

Sie k√∂nnen sie auch separat √ºber die folgenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - Component Introduction
        - Purchase Link

    *   - Raspberry Pi Pico W
        - \-
    *   - :ref:`cpn_button`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|


Verkabelung
---------------------------

.. image:: img/Lesson_01_Button_Module_bb.png
    :width: 100%


Code
---------------------------

.. code-block:: python

   from machine import Pin
   import time
   
   # Set GPIO 2 as an input pin to read the button state
   button = Pin(2, Pin.IN)
   
   # Initialize the onboard LED of the Raspberry Pi Pico W
   led = Pin('LED', Pin.OUT)
   
   while True:
       if button.value() == 0:  # Check if the button is pressed
           led.value(1)  # Turn on the LED
       else:
           led.value(0)  # Turn off the LED
   
       time.sleep(0.1)  # Short delay to reduce CPU usage


Code-Analyse
---------------------------

#. Importieren von Modulen

   Das ``machine``-Modul wird importiert, um mit den GPIO-Pins zu interagieren, und das ``time``-Modul dient der Zeithandhabung.

   .. code-block:: python

      from machine import Pin
      import time

#. Konfigurieren des Tasters

   GPIO 2 wird als Eingangspin konfiguriert. Dies liest den Zustand des daran angeschlossenen Drucktasters.

   .. code-block:: python

      button = Pin(2, Pin.IN)

#. Einrichten der LED

   Die integrierte LED wird als Ausgangspin konfiguriert, um sie programmgesteuert ein- oder auszuschalten.

   .. code-block:: python

      led = Pin('LED', Pin.OUT)

#. Hauptschleife

   - Eine Endlosschleife wird verwendet, um kontinuierlich den Zustand des Tasters zu √ºberpr√ºfen.
   - Wenn der Taster gedr√ºckt wird (``button.value() == 0``), wird die LED eingeschaltet. Andernfalls wird sie ausgeschaltet.
   - Eine kurze Verz√∂gerung von 0,1 Sekunden wird hinzugef√ºgt, um die CPU-Auslastung zu reduzieren.
   
   Das in diesem Projekt verwendete :ref:`button module<cpn_button>` verf√ºgt √ºber einen internen Pull-up-Widerstand (siehe :ref:`schematic diagram<cpn_button_sch>`), der dazu f√ºhrt, dass der Taster bei Bet√§tigung auf einem niedrigen Pegel bleibt und bei Loslassen auf einem hohen Pegel bleibt.

   .. code-block:: python

      while True:
          if button.value() == 0:  # Check if the button is pressed
              led.value(1)  # Turn on the LED
          else:
              led.value(0)  # Turn off the LED
          time.sleep(0.1)  # Short delay to reduce CPU usage