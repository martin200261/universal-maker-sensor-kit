 .. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

Schreibregeln f√ºr Sketche
================================


Wenn Sie einen Freund bitten, das Licht f√ºr Sie einzuschalten, k√∂nnen Sie sagen: "Mach das Licht an.", oder "Licht an, Kumpel.", Sie k√∂nnen jede beliebige Tonlage verwenden.

Wenn Sie jedoch m√∂chten, dass das Arduino-Board etwas f√ºr Sie tut, m√ºssen Sie die Schreibregeln f√ºr das Arduino-Programm befolgen, um die Befehle einzugeben.

Dieses Kapitel enth√§lt die grundlegenden Regeln der Arduino-Sprache und hilft Ihnen zu verstehen, wie Sie nat√ºrliche Sprache in Code √ºbersetzen.

Nat√ºrlich ist dies ein Prozess, der Zeit ben√∂tigt, um sich daran zu gew√∂hnen, und es ist auch der fehleranf√§lligste Teil des Prozesses f√ºr Anf√§nger. Wenn Sie also oft Fehler machen, ist das in Ordnung, versuchen Sie es einfach ein paar Mal mehr.


Semikolon ``;``
------------------

Genau wie beim Schreiben eines Briefes, bei dem Sie am Ende jedes Satzes einen Punkt als Abschluss setzen, m√ºssen Sie in der Arduino-Sprache ``;`` verwenden, um dem Board das Ende des Befehls mitzuteilen.

Nehmen Sie das bekannte Beispiel "Onboard-LED blinkt". Ein korrekter Sketch sollte so aussehen.

Beispiel:

.. code-block:: C

    void setup() {
        // Hier kommt Ihr Setup-Code hin, der einmal ausgef√ºhrt wird:
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // Hier kommt Ihr Hauptcode hin, der wiederholt ausgef√ºhrt wird:
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

Schauen wir uns als N√§chstes die folgenden beiden Sketche an und raten Sie, ob sie von Arduino korrekt erkannt werden k√∂nnen, bevor Sie sie ausf√ºhren.

Sketch A:

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // Hier kommt Ihr Setup-Code hin, der einmal ausgef√ºhrt wird:
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // Hier kommt Ihr Hauptcode hin, der wiederholt ausgef√ºhrt wird:
        digitalWrite(13,HIGH)
        delay(500)
        digitalWrite(13,LOW)
        delay(500)
    }

Sketch B:

.. code-block:: C
    :emphasize-lines: 8,9,10,11,12,13,14,15,16

    void setup() {
        // Hier kommt Ihr Setup-Code hin, der einmal ausgef√ºhrt wird:
        pinMode(13,OUTPUT);
    }
    
    void loop() {
        // Hier kommt Ihr Hauptcode hin, der wiederholt ausgef√ºhrt wird:
        digitalWrite(13,
    HIGH);  delay
        (500
        );
        digitalWrite(13,
        
        LOW);
                delay(500)
        ;
    }

Das Ergebnis ist, dass **Sketch A** einen Fehler meldet und **Sketch B** funktioniert.

* Die Fehler in **Sketch A** sind fehlende ``;`` und obwohl es normal aussieht, kann Arduino es nicht lesen.
* **Sketch B** sieht un√ºbersichtlich aus, aber in der Tat sind Einr√ºckungen, Zeilenumbr√ºche und Leerzeichen in Anweisungen Dinge, die in Arduino-Programmen keine Rolle spielen. F√ºr den Arduino-Compiler sieht es genauso aus wie im Beispiel.

Bitte schreiben Sie Ihren Code jedoch nicht wie **Sketch B**, da normalerweise Menschen den Code schreiben und lesen. Vermeiden Sie also unn√∂tige Schwierigkeiten.

Geschweifte Klammern ``{}``
------------------

``{}`` sind der Hauptbestandteil der Arduino-Programmiersprache und m√ºssen paarweise auftreten. 
Eine bessere Programmierkonvention ist es, eine Struktur, die geschweifte Klammern erfordert, einzuf√ºgen, indem man die rechte geschweifte Klammer direkt nach der linken geschweiften Klammer eingibt und dann den Cursor zwischen die geschweiften Klammern bewegt, um die Anweisung einzuf√ºgen.

Kommentare ``//``
---------------

Kommentare sind der Teil des Sketches, den der Compiler ignoriert. Sie werden normalerweise verwendet, um anderen zu erkl√§ren, wie das Programm funktioniert.

Wenn wir zwei aufeinanderfolgende Schr√§gstriche in eine Codezeile schreiben, ignoriert der Compiler alles bis zum Ende der Zeile.

Wenn wir einen neuen Sketch erstellen, enth√§lt er zwei Kommentare, und wenn wir diese beiden Kommentare entfernen, wird der Sketch in keiner Weise beeinflusst.

.. code-block:: C
    :emphasize-lines: 2,7

    void setup() {
        // Hier kommt Ihr Setup-Code hin, der einmal ausgef√ºhrt wird:

    }

    void loop() {
        // Hier kommt Ihr Hauptcode hin, der wiederholt ausgef√ºhrt wird:

    }

Kommentare sind sehr n√ºtzlich beim Programmieren. Im Folgenden sind einige g√§ngige Verwendungszwecke aufgef√ºhrt.


* Verwendung A: Erkl√§ren Sie sich selbst oder anderen, was dieser Abschnitt des Codes macht.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); // Setze Pin 13 auf Ausgangsmodus, er steuert die Onboard-LED
    }

    void loop() {
        digitalWrite(13,HIGH); // Aktiviere die Onboard-LED, indem Pin 13 auf HIGH gesetzt wird
        delay(500); // Status f√ºr 500 ms beibehalten
        digitalWrite(13,LOW); // Schalte die Onboard-LED aus
        delay(500);// Status f√ºr 500 ms beibehalten
    }

* Verwendung B: Vor√ºbergehendes Deaktivieren einiger Anweisungen (ohne sie zu l√∂schen) und deren Auskommentierung, wenn Sie sie ben√∂tigen, sodass Sie sie nicht neu schreiben m√ºssen. Dies ist sehr n√ºtzlich beim Debuggen von Code und beim Lokalisieren von Programmfehlern.

.. code-block:: C
    :emphasize-lines: 3,4,5,6

    void setup() {
        pinMode(13,OUTPUT);
        // digitalWrite(13,HIGH);
        // delay(1000);
        // digitalWrite(13,LOW);
        // delay(1000);
    }

    void loop() {
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

.. note:: 
    Verwenden Sie die Tastenkombination ``Ctrl+/``, um Ihren Code schnell zu kommentieren oder zu entkommentieren.

Kommentar ``/**/``
------------------------

Genauso wie ``//`` f√ºr Kommentare. Diese Art von Kommentar kann √ºber mehrere Zeilen gehen, und sobald der Compiler ``/*`` liest, ignoriert er alles, was folgt, bis er auf ``*/`` st√∂√üt.

Beispiel 1:

.. code-block:: C
    :emphasize-lines: 1,8,9,10,11

    /* Blink */

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        /*
        Der folgende Code l√§sst die Onboard-LED blinken.
        Sie k√∂nnen die Zahl in delay() √§ndern, um die Blinkfrequenz zu √§ndern.
        */
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }


``#define``
--------------

Dies ist ein n√ºtzliches C++-Werkzeug.

.. code-block:: C

    #define identifier token-string

Der Compiler ersetzt automatisch ``identifier`` durch ``token-string``, wenn er ihn liest. Dies wird normalerweise f√ºr Konstantendefinitionen verwendet.

Als Beispiel hier ein Sketch, der define verwendet, um die Lesbarkeit des Codes zu verbessern.

.. code-block:: C
    :emphasize-lines: 1,2

    #define ONBOARD_LED 13
    #define DELAY_TIME 500

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
        delay(DELAY_TIME); 
        digitalWrite(ONBOARD_LED,LOW); 
        delay(DELAY_TIME);
    }

F√ºr den Compiler sieht es tats√§chlich so aus.


.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }

Wir k√∂nnen sehen, dass der ``identifier`` ersetzt wurde und im Programm nicht existiert.
Deshalb gibt es einige wichtige Punkte, die beim Einsatz zu beachten sind.

1. Ein ``token-string`` kann nur manuell ge√§ndert werden und kann nicht durch arithmetische Operationen im Programm in andere Werte umgewandelt werden.

2. Vermeiden Sie die Verwendung von Symbolen wie ``;``. Zum Beispiel:

.. code-block:: C
    :emphasize-lines: 1

    #define ONBOARD_LED 13;

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
    }

Der Compiler wird dies wie folgt erkennen, was als Fehler gemeldet wird.

.. code-block:: C
    :emphasize-lines: 2,6

    void setup() {
        pinMode(13;,OUTPUT); 
    }

    void loop() {
        digitalWrite(13;,HIGH); 
    }

.. note:: 
    Eine Namenskonvention f√ºr ``#define`` besteht darin, ``identifier`` zu kapitalisieren, um Verwechslungen mit Variablen zu vermeiden.
