.. note::

   Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

   **Warum beitreten?**

   - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
   - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
   - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
   - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
   - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

   üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

 
Variable
==========

Die Variable ist eines der m√§chtigsten und wichtigsten Werkzeuge in einem Programm. Sie hilft uns, Daten in unseren Programmen zu speichern und abzurufen.

Die folgende Sketch-Datei verwendet Variablen. Sie speichert die Pinnummern der Onboard-LED in der Variable ``ledPin`` und die Zahl "500" in der Variable ``delayTime``.

.. code-block:: C
    :emphasize-lines: 1,2

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
    }

Moment mal, ist das nicht ein Duplikat dessen, was ``#define`` tut? Die Antwort ist NEIN.

* Die Rolle von ``#define`` besteht darin, einfach und direkt Text zu ersetzen, es wird vom Compiler nicht als Teil des Programms betrachtet. 
* Eine ``Variable`` hingegen existiert innerhalb des Programms und wird verwendet, um Werte zu speichern und abzurufen. Eine Variable kann auch ihren Wert innerhalb des Programms √§ndern, etwas, das ein ``define`` nicht kann.

Die folgende Sketch-Datei addiert sich selbst zur Variablen und bewirkt, dass die Onboard-LED nach jedem Blinken l√§nger blinkt.

.. code-block:: C

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
        delayTime = delayTime + 200; //Jede Ausf√ºhrung erh√∂ht den Wert um 200
    }

Eine Variable deklarieren
-----------------------------

Eine Variable zu deklarieren bedeutet, eine Variable zu erstellen. 

Um eine Variable zu deklarieren, ben√∂tigt man zwei Dinge: den Datentyp und den Variablennamen. Der Datentyp muss durch ein Leerzeichen von der Variablen getrennt sein, und die Variablendeklaration muss mit einem ``;`` beendet werden.

Verwenden wir diese Variable als Beispiel.

.. code-block:: C

    int delayTime;

**Datentyp**

Hier ist ``int`` ein Datentyp, der Ganzzahlen speichern kann, die von -32768 bis 32766 reichen. Es kann auch nicht verwendet werden, um Dezimalzahlen zu speichern.

Variablen k√∂nnen andere Arten von Daten au√üer Ganzzahlen halten. Die Arduino-Sprache (die, erinnern wir uns, C++ ist) unterst√ºtzt einige davon von Haus aus (hier sind nur die am h√§ufigsten verwendeten und n√ºtzlichsten aufgef√ºhrt):

* ``float``: Speichert eine Dezimalzahl, zum Beispiel 3.1415926.
* ``byte``: Kann Zahlen von 0 bis 255 speichern.
* ``boolean``: H√§lt nur zwei m√∂gliche Werte, ``True`` oder ``False``, obwohl es ein Byte im Speicher belegt.
* ``char``: H√§lt eine Zahl von -127 bis 127. Da es als ``char`` markiert ist, versucht der Compiler, es einem Zeichen aus der |link_ascii| zuzuordnen.
* ``string``: Kann eine Zeichenfolge speichern, z. B. ``Halloween``.


**Variablenname**

Sie k√∂nnen die Variable beliebig benennen, z. B. ``i``, ``apple``, ``Bruce``, ``R2D2``, ``Sectumsempra``, aber es gibt einige grundlegende Regeln zu beachten.

1. Beschreiben Sie, wof√ºr sie verwendet wird. Hier habe ich die Variable ``delayTime`` genannt, damit man leicht verstehen kann, wof√ºr sie dient. Es w√§re zwar auch m√∂glich, die Variable ``barryAllen`` zu nennen, aber das w√ºrde denjenigen, der den Code liest, verwirren.

2. Verwenden Sie eine g√§ngige Nomenklatur. Sie k√∂nnen CamelCase verwenden, wie ich es mit dem gro√üen T in ``delayTime`` getan habe, damit leicht zu erkennen ist, dass die Variable aus zwei W√∂rtern besteht. Alternativ k√∂nnen Sie auch Unterstriche verwenden und die Variable als ``delay_time`` schreiben. Das beeinflusst die Ausf√ºhrung des Programms nicht, aber es erleichtert das Lesen des Codes, wenn Sie eine einheitliche Nomenklatur verwenden.

3. Verwenden Sie keine Schl√ºsselw√∂rter. √Ñhnlich wie beim Tippen von "int" f√§rbt die Arduino IDE es ein, um Sie daran zu erinnern, dass es sich um ein Wort mit einer besonderen Funktion handelt und nicht als Variablenname verwendet werden kann. √Ñndern Sie den Namen der Variable, wenn sie eingef√§rbt wird.

4. Spezielle Symbole sind nicht erlaubt. Zum Beispiel Leerzeichen, #, $, /, +, %, usw. Die Kombination aus englischen Buchstaben (Gro√ü- und Kleinschreibung), Unterstrichen und Zahlen (wobei Zahlen nicht als erstes Zeichen eines Variablennamens verwendet werden d√ºrfen) ist ausreichend.


**Einen Wert einer Variablen zuweisen**

Sobald wir die Variable deklariert haben, ist es an der Zeit, Daten zu speichern. Wir verwenden den Zuweisungsoperator (d. h. ``=``), um der Variable einen Wert zuzuweisen.

Wir k√∂nnen der Variable beim Deklarieren sofort einen Wert zuweisen.

.. code-block:: C

    int delayTime = 500;

Es ist auch m√∂glich, ihr zu einem sp√§teren Zeitpunkt einen neuen Wert zuzuweisen.

.. code-block:: C

    int delayTime; // kein Wert
    delayTime = 500; // Wert ist 500
    delayTime = delayTime + 200; // Wert ist 700
